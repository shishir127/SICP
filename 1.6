(define (new_if predicate then-clause else-clause)
	(cond (predicate then-clause)
		(else-clause)))

(define (improve guess x)
	(average guess (/ x guess)))

(define (average x y)
	(/ (+ x y) 2))

(define (good-enough? guess x)
	(< (abs (- (square guess) x)) 0.001))


(define (sqrt-iter guess x)
	(new-if (good-enough? guess x)
		guess
		(sqrt-iter (improve guess x)
				x)))

(sqrt 9)
(sqrt (+ 100 37))
(sqrt (+ (sqrt 2) (sqrt 3)))

sqrt with new-if

1 ]=> (sqrt 9)

;Value: 3

1 ]=> (sqrt (+ 100 37))

;Value: 11.704699910719626

1 ]=> (sqrt (+ (sqrt 2) (sqrt 3)))

;Value: 1.7737712281864233

sqrt with regular if

1 ]=> (sqrt 9)

;Value: 3

1 ]=> (sqrt (+ 100 37))

;Value: 11.704699910719626

1 ]=> (sqrt (+ (sqrt 2) (sqrt 3)))

;Value: 1.7737712281864233
