(define (make-account-and-serializer balance)
  (let ((account-no (generate-account-number))
       )
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (get-account-number)
    account-no
  )
  (let ((balance-serializer (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
            ((eq? m 'deposit) deposit)
            ((eq? m 'balance) balance)
	    ((eq? m 'account-number)  (get-account-number))
            ((eq? m 'serializer) balance-serializer)
            (else (error "Unknown request -- MAKE-ACCOUNT"
                         m))))
    dispatch)
 )
  )

(define (exchange account1 account2)
  (let ((difference (- (account1 'balance)
                       (account2 'balance))))
    ((account1 'withdraw) difference)
    ((account2 'deposit) difference)))

(define (serialized-exchange account1 account2)
  (define (se a1 a2)
      (let ((serializer1 (a1 'serializer))
            (serializer2 (a2 'serializer))
	   )
        ((serializer1 (serializer2 exchange)) a1 a2)
      )
  )
  (if (< (account1 'account-number) (account2 'account-number))
      (se account1 account2)
      (se account2 account1)
  )
)
