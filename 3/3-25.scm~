(define (make-table same-key?)
  (let ((local-table (list '*table*)))
    (define (assoc key records)
      (cond ((null? records) false)
	    ((same-key? key (caar records)) (car records))
	    (else (assoc key (cdr records)))))
    (define (lookup . keys)
      (define (iter current-table key)
	(if (null? key)
	    current-table
	    (let ((subtable        (assoc (car key) (cdr current-table)))
	         )
	       (if subtable
		   (iter subtable (cdr key))
		   false
	       )
	    )
        )
      )
      (if (null? keys)
	  (display "No keys were passed for lookup")
	  (iter (car keys) (cdr keys))
	  )
    )
    (define (insert! value . keys)
      (define (iter current-table key)
        (let ((subtable (assoc (car key) (cdr current-table))))
	(if (null? key)
	    (begin (set-cdr! record value)
		   (set-cdr! table
			     (cons (cons key value) (cdr table))
		   )
		   ('ok)
	    )
	    (let ((subtable (assoc (car key) (cdr current-table)))
		 )
	      (if subtable
		  (iter subtable (cdr key))
		  false
	      )
	    )
	)
      )
      (if (null? keys)
	  (display "No keys were passed for the insertion")
	  (iter local-table keys)
      )
    )    
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))
  )
