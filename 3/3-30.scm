(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))

(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))

(define (ripple-carry-adder A B S C)
  (define (iter a b c prev-carry s c)
    (if (null? a)
	null
	(begin (full-adder (car a) (car b) (prev-carry) (car s) (car c))
	       (iter (cdr a) (cdr b) (car c) (cdr s) (cdr c))
	)
    )
  )
  (iter A B 0 S C)
)
