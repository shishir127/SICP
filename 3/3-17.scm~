(define (num-elements seq)
  (define (iter seq count)
    (if (null? seq)
	count
	(iter (cdr seq) (+ count 1))
    )
  )
  (iter seq 0)
)

(define (contains? seq element)
  (cond (
	 ((eq? (car seq) element)     (eq? (car seq element))))
	 ((null? seq)     false)
	 (else (contains? (cdr seq) element))
        )
  )
)

(define (count-distinct-pairs seq)
  (let ((distinct-pairs (list ))
	)
    (define (iter s)
      (cond((null? s)     null)
	   ((pair? s)     (if (contains? distinct-pairs s)
			      (begin (cons s distinct-pairs)
				     (iter (car s))
				     (iter (cdr s))
			      )
			  )
	   )
      )
    )
    (begin (iter seq)
	   (num-elements distinct-pairs)
    )
  )
)

(count-distinct-pairs t2)
