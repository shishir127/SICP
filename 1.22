(define (timed-prime-test n)
	(newline)
	(start-prime-test n (runtime))
)

(define (prime? num)
	(three-primes 0 num)
)

(define (start-prime-test n start-time)
	(if (prime? n)
		(report-prime (- runtime start-time))
	)
)

(define (report-prime elapsed-time)
	(display " *** ")
	(display elapsed-time)
)

(define (three-primes count n)
	(cond ((= count 3) (= 1 1))
	      ((= (prime-iter (+ n 2) 3) (+ n 2)) (three-primes (+ count 1) (+ n 2)))
	      (else (three-primes count (+ n 2)))
	)
)

(define (prime-iter n div)
	(cond ((>(* div div) n) n)
	      ((=(remainder n div) 0)  div)
	      (else (prime-iter n (+ div 2)))
	)
)
