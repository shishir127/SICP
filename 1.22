(define (timed-prime-test n)
	(newline)
	(display n)
	(start-prime-test n (runtime))
)

(define (next n)
	(if (=(remainder n 2) 0)
	    (+ n 1)
	    (+ n 2)
	)
)

(define (divides? a b)
	(= (remainder b a) 0)
)

(define (find-divisor n test-divisor)
	(cond ((> (* test-divisor test-divisor) n) n)
	      ((divides? test-divisor n) test-divisor)
	      (else (find-divisor n (next test-divisor)))
	)
)

(define (smallest-divisor n)
	(find-divisor n 2)
)

(define (prime? num)
	(= n (smallest-divisor n))
)

(define (start-prime-test n start-time)
	(if (prime? n)
	    (report-prime (- runtime start-time)))
)

(define (report-prime elapsed-time)
	(display " *** ")
	(display elapsed-time)
)

(define (three-primes count n)
	( ((= count 3) (= 1 1))
	      ((= (prime? n) #t) (three-primes (+ count 1) (next n)))
	      (else (three-primes count (next n)))
	)
)

(define (prime-iter n div)
	(cond ((>(* div div) (display n)))
	      ((=(remainder n div) 0)  div)
	      (else (prime-iter n (next div)))
	)
)