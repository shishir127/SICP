(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (get-first seq)
	(map (lambda (x) (car x))
	     seq
	)
)

(define (truncate-first-member seq)
	(map (lambda (x) (cdr x))
	     seq
	)
)

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      null
      (cons (accumulate op init (get-first seqs))
            (accumulate-n op init (truncate-first-member seqs)))))

(define s (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))

(accumulate-n + 0 s)

> (accumulate-n + 0 s)
'(22 26 30)




(define (accumulate-n op init seqs)
	(define (iter op x s)
		(if (null? (car s))
	    	    x
		    (accumulate-n op
				  (append x (cons (accumulate op init (get-next s)) null)))
				  (truncate-first-member s)
		    )
		)
	)
	(iter op init seqs)
)


(define s (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))

> (accumulate-n + 0 s)
'(22 26 30)