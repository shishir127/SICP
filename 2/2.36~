(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      null
      (cons (accumulate op init (car seqs))
            (accumulate-n op init (cdr seqs)))))


(define (accumulate-n op init seqs)
	(define (iter op x s)
		(if (null? (car s))
	    	    x
		    (accumulate-n op
				  (append x (cons (accumulate op init (get-next s)) null)))
				  (truncate-first-member s)
		    )
		)
	)
	(iter op init seqs)
)


(define s (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))

(accumulate-n + 0 s)