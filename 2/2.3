(define (abs x)
	(if (< x 0)
	    (- 0 x)
	    x
	)
)

(define (make-point x y)
	(cons x y)
)

(define (x-ordinate point)
	(car point)
)

(define (y-ordinate point)
	(cdr point)
)

(define (make-segment start end)
	(cons start end)
)

(define (start-segment segment)
	(car segment)
)

(define (end-segment segment)
	(cdr segment)
)

(define (midpoint-segment segment)
	(make-point (/ (+ (x-ordinate (start-segment segment))
			  (x-ordinate (end-segment segment))
			)
			2
		    )
		    (/ (+ (y-ordinate (start-segment segment))
			  (y-ordinate (end-segment segment))
			)
			2
		    )
	)
)

(define (print-point p)
  (newline)
  (display "(")
  (display (x-ordinate p))
  (display ",")
  (display (y-ordinate p))
  (display ")")
)

#make-rectangle takes top-left and bottom-right points or rectangle
(define (make-rect a b)
	(if (> (x-ordinate a) (x-ordinate b))
	    (cons a b)
	    (cons b a)
	)
)

(define (top-left-corner rect)
	(car rect)
)

(define (bottom-right-corner rect)
	(cdr rect)
)

(define (width rect)
	(abs (- (x-ordinate (top-left-corner))
		(x-ordinate (bottom-right-corner))
	     )
	)
)

(define (height rect)
	(abs (- (y-ordinate (top-left-corner))
		(y-ordinate (bottom-right-corner))
	     )
	)
)

(define (rect-perimeter rect)
	(* 2 (+ (width rect) (height rect))
	)
)

(define (rect-area rect)
	(* (width rect) (height rect))
)

> (define top-left (make-point 1 0))
> (define bottom-right (make-point 0 1))
> (define test-rect (make-rect top-left bottom-right))
> (rect-perimeter test-rect)
4
> (rect-area test-rect)
1
