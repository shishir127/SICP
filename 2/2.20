(define (even? x)
	(if (not (null? x))
	    (= 0 (remainder x 2))
	    null
	)
)

(define (same-parity . arg)
	(let ((parity (even? (car arg)))
	     )
	     (define (iter input output)
	     	     (cond ((null? input) output)
			   ((not (xor parity (even? (car input)))) (iter (cdr input) (cons (car input) output)))
			   (else (iter (cdr input) output))
		     )
	     )
	     (iter arg null)
	)
)(define (even? x)
	(if (not (null? x))
	    (= 0 (remainder x 2))
	    null
	)
)

(define (xor . args)
	(if (null? args)
	    null
	    (iter (args )
	)
)

(define (same-parity . arg)
	(let ((parity (even? (car arg)))
	     )
	     (define (iter input output)
	     	     (cond ((null? input) output)
			   ((and parity (even? (car input))) (iter (cdr input) (cons (car input) output)))
			   (else (iter (cdr input) output))
		     )
	     )
	     (iter arg null)
	)
)

> (same-parity 1 2 3 4 5 6 7)
'(7 5 3 1)