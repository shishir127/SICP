(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things) 
              (cons (square (car things))
                    answer))))
  (iter items nil))

> (square-list (list 1 2 3 4 5))
'(25 16 9 4 1)
This happens becuase of the list is iterated over in the normal order. If the list is iterated over in the reverse order, this proc will produce the desired result.

(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons answer
                    (square (car things))))))
  (iter items nil))

The switched arguments creates a nested pairs
> (square-list (list 1 2 3 4 5))
'(((((() . 1) . 4) . 9) . 16) . 25)