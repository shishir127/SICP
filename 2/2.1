(define (gcd a b)
	(define (iter a b)
		(if (= b 0)
		    a
		    (iter b (remainder a b))
		)
	)
	(if (> a b)
	    (iter a b)
	    (iter b a)
	)
)

(define (abs x) (if (< x 0)
		    (- 0 x)
		    x
		)
)

(define (make-rat n d)
	(let((g (gcd (abs n) (abs d)))
	    )
		(if (> (* n d) 0)
		    (cons (/ (abs n) g) (/ (abs d) g))
		    (cons (* -1 (/ (abs n) g)) (/ (abs d) g))
		)
	)
)

(define (numerator x)
	(car x)
)

(define (denominator x)
	(cdr x)
)

> (make-rat -2 -3)
'(2 . 3)
> (define test (make-rat -6 -4))
> (numerator test)
3
> (denominator test)
2
