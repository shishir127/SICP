(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))



(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (mul-interval x 
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))

(define (make-interval a b)
	(if (< a b)
	    (cons a b)
	    (cons b a)
	)
)

(define (upper-bound interval) (car interval))
(define (lower-bound interval) (cdr interval))


(define (sub-interval intvl1 intvl2)
	(let((min1 (- (lower-bound intvl1) (upper-bound intvl2)))
	     (min2 (- (lower-bound intvl2) (upper-bound intvl1)))
	     (max1 (- (upper-bound intvl1) (lower-bound intvl2)))
	     (max2 (- (upper-bound intvl2) (lower-bound intvl1)))
	    )
	(make-interval (min min1 min2 max2 max1)
		       (max max1 max2 min1 min2)
	)
	)
)

(define i1 (make-interval 0 1))
(define i2 (make-interval 1 2))
(sub-interval i1 i2)


> (define i1 (make-interval 0 1))
> (define i2 (make-interval 1 2))
> (sub-interval i1 i2)
'(-2 . 2)
