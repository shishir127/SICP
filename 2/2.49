(define (make-vect x y)
	(cons x y)
)

(define (xcor-vect vec)
	(car vec)
)

(define (ycor-vect vec)
	(cdr vec)
)

(define (add-vect v1 v2)
	(make-vect (+ (xcor-vect v1) (xcor-vect v2))
		   (+ (ycor-vect v1) (ycor-vect v2))
	)
)

(define (sub-vect v1 v2)
	(make-vect (- (xcor-vect v1) (xcor-vect v2))
		   (- (ycor-vect v1) (ycor-vect v2))
	)
)

(define (scale-vect vec factor)
	(make-vect (* factor (xcor-vect vec))
		   (* factor (ycor-vect vec))
	)
)


(define (outline-frame frame)
	(let ((o (origin frame))
	      (x (x-edge frame))
	      (y (y-edge frame)))
	(segments->painter (list (make-segment o (add-vect o x))
			   	 (make-segment o (add-vect o y))
				 (make-segment y (add-vect x y))
				 (make-segment x (add-vect x y))
			   )
	)
	)
        )
)

(define (cross-frame frame)
	(let ((o (origin frame))
	      (x (x-edge frame))
	      (y (y-edge frame)))
	(segments->painter (list (make-segment o (add-vect x y))
			   	 (make-segment (add-vect o y) (add-vect o x))
			   )
	)
)

(define (diamond frame)
	(let ((o (origin frame))
	      (x (x-edge frame))
	      (y (y-edge frame)))
	(segments->painter (list (make-segment (add-vect o (scale-vect y 0.5))
			   	 	       (add-vect (add-vect o y) (scale-vect x 0.5))
			   	 )
				 (make-segment (add-vect (add-vect o y) (scale-vect x 0.5))
				 	       (add-vect (add-vect o x) (scale-vect y 0.5))
				 )
				 (make-segment (add-vect (add-vect o x) (scale-vect y 0.5))
				 	       (add-vect 0 (scale-vect x 0.5))
				 )
				 (make-segment (add-vect 0 (scale-vect x 0.5))
				 	       (add-vect o (scale-vect y 0.5))
				 )
			   )
	)
)