(define row
  (list 1 2 3 4 5 6 7 8)
)

(define col
  (list 1 2 3 4 5 6 7 8)
)

(define (safe_rows? r seq)
  (cond ((null? seq)     true)
        ((= r (caar seq))     false)
	(else      (safe_rows? r (cdr seq)))
  )
)

(define (safe_cols? c seq)
  (cond ((null? seq)     true)
	((= c (cdar seq))     false)
	(else     (safe_cols? c (cdr seq)))
  )
)

(define (safe_diags? coord seq)
  (cond ((null? seq)     true)
	((= (abs (- (car coord) (caar seq))) (abs (- (cdr coord) (cdar seq))))    false)
	(else      (safe_diags? coord (cdr seq)))
  )
)

(define (safe? queens)
  (define (iter seq)
    (cond ((null? seq)     true)
	  ((and (safe_rows? (caar queens) (cdr queens)
		)
	        (safe_cols? (cadr queens) (cdr queens)
		)
		(safe_diags? (car queens) (cdr queens)
		)
	   )
	  )
    )
  )
  (if (null? queens)
      null
      (iter queens)
  )
)

(define (eight-queens)
  (let ((a    (cons (amb row) (amb col)))
	(b    (cons (amb row) (amb col)))
	(c    (cons (amb row) (amb col)))
	(d    (cons (amb row) (amb col)))
	(e    (cons (amb row) (amb col)))
	(f    (cons (amb row) (amb col)))
	(g    (cons (amb row) (amb col)))
	(h    (cons (amb row) (amb col)))
       )
    (require (safe? (list a b c d e f g h))
    (list a b c d e f g h)
