(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())

(define (make-frame variables values)
  (define (make-bindings var val bindings)
    (if (null? var)
	bindings
	(make-bindings (cdr var) (cdr val) (cons (cons (car var) (car val)) bindings))
    )
  )
  (make-bindings variables values null)
)
(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))
(define (add-binding-to-frame! var val frame)
  (cons (cons var val) frame)
)

(define (length seq)
  (define (iter s l)
    (if (null? s)
	l
	(iter (cdr s) (+ l 1))
    )
  )
  (iter seq 0)
)

(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
          (error "Too many arguments supplied" vars vals)
          (error "Too few arguments supplied" vars vals))))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (caar vars))
             (cdar vars))
            (else (scan (cdr vars))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan frame))))
    (env-loop env))
)

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (set-cdar! vals val))
            (else (scan (cdr vars)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (scan frame))))
  (env-loop env))


(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars)
      (cond ((null? vars)
             (add-binding-to-frame! var val frame))
            ((eq? var (car vars))
             (set-cdar! vals val))
            (else (scan (cdr vars)))))
    (scan frame))))
