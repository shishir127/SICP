(define (definition? exp)
  (eq? tagged-list? 'define)
)

(define (get-var exp)
  (cadr exp)
)

(define (iterative-replace! a b exp)
  (if (null? exp)
      null
      (begin (cond ((tagged-list? (car exp) a)     (set-car! exp b)))
	     (iterative-replace! a b (cdr exp))
      )
  )
)

(define (replace-define-with-set! exp env)
  (iterative-replace! 'define 'set! exp env)
)

(define (internal-define exp env)
  (let ((local-vars null)
	)
    (define (find-local-vars exp output)
      (if (null? exp)
	  output
	  (if (definition? (car exp))
	      (find-local-vars (cdr exp) (cons (get-var exp) output))
	      (find-local-vars (cdr exp) output)
	  )
      )
    )
    (begin (find-local-vars exp local-vars)
	   (cond ((not (null? local-vars))     (add-variable (local-vars) (create-list null (length local-vars)) env)))
	   (replace-define-with-set! exp env)
    )
  )
)
